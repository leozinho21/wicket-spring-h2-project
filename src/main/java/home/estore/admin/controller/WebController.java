package home.estore.admin.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import home.estore.admin.client.SOAPConnector;
import home.estore.core.business.repositories.shoppingcart.PcCpuRepository;
import home.estore.core.business.repositories.shoppingcart.PcHardDriveRepository;
import home.estore.core.business.repositories.shoppingcart.PcMemoryRepository;
import home.estore.core.business.repositories.shoppingcart.PcMonitorRepository;
import home.estore.core.business.repositories.shoppingcart.PortalUserRepository;
import home.estore.core.model.estore.AssembledPC;
//import home.estore.core.business.repositories.shoppingcart.ShoppingCartRepository;
import home.estore.core.model.estore.PcCpu;
import home.estore.core.model.estore.PcHardDrive;
import home.estore.core.model.estore.PcMemory;
import home.estore.core.model.estore.PcMonitor;
import home.estore.core.model.estore.PortalUser;
import home.estore.core.model.shoppingcart.ShoppingCart;
import home.estore.msoffice.GetMsofficeRequest;
import home.estore.msoffice.GetMsofficeResponse;
import home.estore.msoffice.Msoffice;
//import home.estore.web.config.ShoppingCartRepository;


@Controller 
@RequestMapping("/web") // This means URL's start with / (after Application path)
public class WebController {
	
//	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle
				// the data
	@Autowired
	private PortalUserRepository 	portalUserRepository;
	@Autowired
	private PcCpuRepository 		pcCpuRepository;
	@Autowired
	private PcMonitorRepository 	pcMonitorRepository;
	@Autowired
	private PcMemoryRepository 		pcMemoryRepository;
	@Autowired
	private PcHardDriveRepository 	pcHardDriveRepository;
	@Autowired
	private SOAPConnector 			soapConnector;

	@RequestMapping({ "buyPC" })
	public ModelAndView addProductHandler(HttpServletRequest request) {
		
		AssembledPC 	assembledPC  = (AssembledPC)request.getSession().getAttribute("assembledPC");
		ShoppingCart 	shoppingCart = (ShoppingCart)request.getSession().getAttribute("shoppingCart");
		
		double price = 0;
		
		if(assembledPC != null) {
			price += assembledPC.calcTotalPrice();
		}
		if(shoppingCart != null && shoppingCart.getMicrosoftService() != null) {
			price += shoppingCart.getMicrosoftService().getPrice();
		}
		ModelAndView model = new ModelAndView("shoppingCart");
		model.addObject("assembledPC", assembledPC);
		model.addObject("totalPrice", price);
		
		return model;
	}
	
	@RequestMapping({ "addPortalUserDetails" })
	public ModelAndView addPortalUserDetails(HttpServletRequest request,
			@RequestParam(value = "name", defaultValue = "") String name,
			@RequestParam(value = "surname", defaultValue = "") String surname,
			@RequestParam(value = "email", defaultValue = "") String email,
			@RequestParam(value = "phone", defaultValue = "") String phone,
			@RequestParam(value = "city", defaultValue = "") String city,
			@RequestParam(value = "address", defaultValue = "") String address) {
		
		PortalUser portalUser = new PortalUser();
		portalUser.setName(name);
		portalUser.setSurname(surname);
		portalUser.setEmail(email);
		portalUser.setAddress(address);
		portalUser.setCity(city);
		
		portalUserRepository.save(portalUser);
		ModelAndView model = new ModelAndView("success");
		
		return model;
	}
	
	@RequestMapping({ "addMsOffice" })
	public ModelAndView addMsOffice(HttpServletRequest request) {
		
		ShoppingCart shoppingCart = (ShoppingCart)request.getSession().getAttribute("shoppingCart");
		AssembledPC assembledPC = (AssembledPC)request.getSession().getAttribute("assembledPC");
		
		if(shoppingCart == null) {
			shoppingCart = new ShoppingCart();
		}
		
		shoppingCart.setAssembledPC(assembledPC);
		request.getSession().setAttribute("shoppingCart",shoppingCart);
		
		ModelAndView model = new ModelAndView("page2");

		if(shoppingCart.getMicrosoftService() == null) {
			GetMsofficeRequest officeRequestFamily = new GetMsofficeRequest();
			officeRequestFamily.setCode("ms.365.family");
			GetMsofficeRequest officeRequestPersonal = new GetMsofficeRequest();
			officeRequestPersonal.setCode("ms.365.personal");
			GetMsofficeResponse response  =(GetMsofficeResponse) soapConnector.callWebService("http://localhost:9090/ws/ms-office-details", officeRequestFamily);
	        GetMsofficeResponse response2 =(GetMsofficeResponse) soapConnector.callWebService("http://localhost:9090/ws/ms-office-details", officeRequestPersonal);
	       
	        System.out.println("Got Response As below ========= : ");
	        System.out.println("Name 	: " + response.getMsoffice().getName());
	        System.out.println("Price 	: " + response.getMsoffice().getPrice());
	        System.out.println("Code 	: " + response.getMsoffice().getCode());

	        System.out.println("------------------------------------------");
	        System.out.println("Name 	: " + response2.getMsoffice().getName());
	        System.out.println("Price 	: " + response2.getMsoffice().getPrice());
	        System.out.println("Code 	: " + response2.getMsoffice().getCode());
	        System.out.println("\n");
	       
	        model.addObject("office365Family"	, response.getMsoffice());
	        model.addObject("office365Personal"	, response2.getMsoffice());
	        
	        request.getSession().setAttribute("ms.365.family"	,	response.getMsoffice());
	        request.getSession().setAttribute("ms.365.personal"	,	response2.getMsoffice());
		}
		
		return model;
	}
	
	@RequestMapping({ "buyMsOffice" })
	public String buyMsOffice(HttpServletRequest request,
			@RequestParam(value = "officeCode", defaultValue = "") String officeCode) {
		
		ShoppingCart 	shoppingCart 	= (ShoppingCart)request.getSession().getAttribute("shoppingCart");
		AssembledPC 	assembledPC 	= (AssembledPC)request.getSession().getAttribute("assembledPC");
		Msoffice		selectedOffice  = (Msoffice)request.getSession().getAttribute(officeCode);
		
		if(shoppingCart != null) {
			shoppingCart = new ShoppingCart();
		}
		
		shoppingCart.setAssembledPC(assembledPC);
		shoppingCart.setMicrosoftService(selectedOffice);
		
		request.getSession().setAttribute("shoppingCart",shoppingCart);
		
		return "redirect:addMsOffice";
	}
	
	@RequestMapping({ "removeMsOffice" })
	public String removeMsOffice(HttpServletRequest request,
			@RequestParam(value = "officeCode", defaultValue = "") String officeCode) {
		
		ShoppingCart 	shoppingCart 	= (ShoppingCart)request.getSession().getAttribute("shoppingCart");
		AssembledPC 	assembledPC 	= (AssembledPC)request.getSession().getAttribute("assembledPC");
		Msoffice		selectedOffice  = (Msoffice)request.getSession().getAttribute(officeCode);
		
		if(shoppingCart != null) {
			shoppingCart = new ShoppingCart();
		}
		
		shoppingCart.setAssembledPC(assembledPC);
		
		if(selectedOffice != null) {
			shoppingCart.setMicrosoftService(null);
		}
		
		request.getSession().setAttribute("shoppingCart",shoppingCart);
		
		return "redirect:addMsOffice";
	}
	
	@RequestMapping(value = "shop", method = RequestMethod.GET)
	public ModelAndView getdata() {
		
		ShoppingCart cart = null;//shopingCartRepository.findByCode("default");
		if(cart == null) {
			cart = new ShoppingCart();
		}
		Iterable<PcCpu> 		cpuIter 	= pcCpuRepository.count() 		> 0 ? pcCpuRepository.findAll() 		: null;
		Iterable<PcMonitor> 	cpuMonitor 	= pcMonitorRepository.count() 	> 0 ? pcMonitorRepository.findAll() 	: null;
		Iterable<PcMemory> 		pcMemory 	= pcMemoryRepository.count() 	> 0 ? pcMemoryRepository.findAll() 		: null;
		Iterable<PcHardDrive> 	hardDrive 	= pcHardDriveRepository.count() > 0 ? pcHardDriveRepository.findAll()	: null;

		ModelAndView model = new ModelAndView("page1");
		model.addObject("cart", cart);
		
		if(cpuIter != null) {
			List<PcCpu> cpuList = new ArrayList<>();
			cpuIter.forEach(cpuList::add);
			model.addObject("cpuList", cpuList);
		}
		if(cpuMonitor != null) {
			List<PcMonitor> monitorist = new ArrayList<>();
			cpuMonitor.forEach(monitorist::add);
			model.addObject("monitorist", monitorist);
		}
		if(pcMemory != null) {
			List<PcMemory> memoryList = new ArrayList<>();
			pcMemory.forEach(memoryList::add);
			model.addObject("memoryList", memoryList);
		}
		if(hardDrive != null) {
			List<PcHardDrive> hardDriveList = new ArrayList<>();
			hardDrive.forEach(hardDriveList::add);
			model.addObject("hardDriveList", hardDriveList);
		}
		return model;

	}
	
	@RequestMapping(value="addItem")
	public String addItem(HttpServletRequest request ,
			@RequestParam(value = "quantity", defaultValue = "") String quantity,
			@RequestParam(value = "type", defaultValue = "") String type,
			@RequestParam(value = "id", defaultValue = "") String id) {
		
		AssembledPC assembledPC = (AssembledPC) request.getSession().getAttribute("assembledPC");
		
		if(assembledPC == null) {
			assembledPC = new AssembledPC();
		}
		if("cpu".equals(type)) {
			PcCpu cpu = pcCpuRepository.findOne(Long.valueOf(id));
			
			if(cpu != null) {
				assembledPC.setCpu(cpu);
			}
		}
		else if("memory".equals(type)) {
			PcMemory memory = pcMemoryRepository.findOne(Long.valueOf(id));

			if(!quantity.isEmpty()) {
				memory.setQuantity(Integer.valueOf(quantity));
			}
			if(memory != null) {
				assembledPC.addMemory(memory);
			}
		}
		else if("hardDrive".equals(type)) {
			PcHardDrive pcHardDrive = pcHardDriveRepository.findOne(Long.valueOf(id));
			
			if(pcHardDrive != null) {
				assembledPC.setHardDrive(pcHardDrive);
			}
		}
		else if("monitor".equals(type)) {
			PcMonitor monitor = pcMonitorRepository.findOne(Long.valueOf(id));
			
			if(monitor != null) {
				assembledPC.setMonitor(monitor);
			}
		}
		
		request.getSession().setAttribute("assembledPC",assembledPC);
		
		return "redirect:shop";
	}
	
	@RequestMapping(value="removeItem")
	public String removeItem(HttpServletRequest request ,
			@RequestParam(value = "type", defaultValue = "") String type,
			@RequestParam(value = "id", defaultValue = "") String id) {
		
		AssembledPC assembledPC = (AssembledPC) request.getSession().getAttribute("assembledPC");
		
		if(assembledPC == null) {
			assembledPC = new AssembledPC();
		}
		if("cpu".equals(type)) {
			assembledPC.setCpu(null);
		}
		else if("memory".equals(type)) {
			PcMemory memory = pcMemoryRepository.findOne(Long.valueOf(id));
			assembledPC.removeMemory(memory);
		}
		else if("hddrive".equals(type)) {
			assembledPC.setHardDrive(null);
		}
		else if("monitor".equals(type)) {
			assembledPC.setMonitor(null);
		}
		
		request.getSession().setAttribute("assembledPC",assembledPC);
		
		return "redirect:shop";
	}
//	@RequestMapping({ "/confirmCheckout" })
//	public String confirmCheckout(HttpServletRequest request) {
//
//		Cart cartInfo = (Cart) request.getSession().getAttribute("myCart");
//		
//		if (cartInfo.isEmpty()) {
//	            // Redirect to shoppingCart page.
//			 return "redirect:/shoppingCart";
//	    } 
//		
//		// remove cart from session
//		request.getSession().removeAttribute("myCart");
//		request.getSession().setAttribute("latestOrderNo", cartInfo.getOrderNum());
//		request.getSession().setAttribute("latestTotal", cartInfo.getAmountTotal());
//		return "checkout";
//	}
	
//	private Iterable<Book> initDB() {
//		Book android = new Book("Android Application Development", "Lauren Darcey");
//		android.setImageURL("/books/android.jpg");
//		android.setPrice(34.0);
//		bookRepository.save(android);
//
//		Book cloud = new Book("Cloud Computing", "Dr. Kumar Saurabh");
//		cloud.setImageURL("/books/cloud.jpg");
//		cloud.setPrice(35.0);
//		bookRepository.save(cloud);
//
//		Book html5 = new Book("Html5 Multimedia and Design", "Ian Devlin");
//		html5.setImageURL("/books/html5-multimedia.jpg");
//		html5.setPrice(25.0);
//		bookRepository.save(html5);
//
//		Book jQuery = new Book("JQuery Mobile Web Development Essentials", "Raymond Camden");
//		jQuery.setImageURL("/books/jQuery.jpg");
//		jQuery.setPrice(50.0);
//		bookRepository.save(jQuery);
//
//		Book node = new Book("Node Web Development", "David Herron");
//		node.setImageURL("/books/node.jpg");
//		node.setPrice(49.0);
//		bookRepository.save(node);
//
//		Book spring = new Book("Spring In Action", "Graig Walls");
//		spring.setImageURL("/books/spring.jpg");
//		spring.setPrice(39.0);
//		bookRepository.save(spring);
//
//		return bookRepository.findAll();
//	}
}
